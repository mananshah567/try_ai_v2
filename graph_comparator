import pandas as pd
from decimal import Decimal, InvalidOperation

def _safe_str(v):
    if v is None: return ''
    s = str(v).strip()
    return '' if s.lower() in ('nan','none') else s

def _iter_rows(df_or_rows):
    return df_or_rows.itertuples(index=False, name='Row') if isinstance(df_or_rows, pd.DataFrame) else df_or_rows

# ---------- Vertex (ID-only) ----------

# vertex IDs from DF
ids_df = (
    df_vertices['ID']
      .astype('string')      # pandas nullable string dtype (keeps <NA>)
      .str.strip()
      .dropna()
)
want_vertex_ids = set(ids_df[ids_df.ne('')])

# diffs vs graph
existing_vertex_ids = set(existing_vertex_ids)  # from your loader
to_upload_vertices = want_vertex_ids - existing_vertex_ids
to_delete_vertices = existing_vertex_ids - want_vertex_ids

def normalize_weight(s):
    # optional: ensure weight string is stable across sources
    from decimal import Decimal, InvalidOperation
    s = str(s).strip()
    try:
        return format(Decimal(s).normalize(), 'f').rstrip('0').rstrip('.') or '0'
    except (InvalidOperation, ValueError):
        return s

edge_ids_df = (
    df_edges
      .assign(
          _out=df_edges['out'].astype('string').str.strip(),
          _in=df_edges['in'].astype('string').str.strip(),
          _w=df_edges['weight'].map(normalize_weight).astype('string').str.strip()
      )
      .eval("edge_id = _out + '|' + _w + '|' + _in")['edge_id']
      .astype('string').str.strip().dropna()
)
want_edge_ids = set(edge_ids_df[edge_ids_df.ne('')])

